/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tp1;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.SwingUtilities;

/**
 *
 * @author 21301646
 */
public class PanelEx10PolyLines extends javax.swing.JPanel {

    private List<Point> workingPolyline = new ArrayList<>();
    private List<List<Point>> polylines = new ArrayList<>();
    private Point workingPoint;

    private Graphics2D g2;
    private final static Color FINAL_COLOR = Color.BLACK;
    private final static Color WORKING_POLY_COLOR = Color.BLUE;
    private final static Color WORKING_LINE_COLOR = Color.RED;
    private int n;
    private boolean drawPolys;
    private boolean drawTempLine;

    private void addPoint(Point point) {
        workingPolyline.add(point);
    }

    private void deleteLastPoint() {
        workingPolyline.remove(workingPolyline.size() - 1);
    }

    private void savePolyline() {
        List<Point> newPolyline = new ArrayList<>();
        for (Point point : workingPolyline) {
            newPolyline.add(point);
        }
        polylines.add(newPolyline);
        workingPolyline.clear();
    }

    private enum State {
        INIT, UNI, POLY
    }

    private State state;

    /**
     * Creates new form Panel_Ex9_RubberBanding
     */
    public PanelEx10PolyLines() {
        initComponents();
        init();
    }

    private void init() {
        state = State.INIT;
        n = 0;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        if (drawPolys) {
            g2.setColor(FINAL_COLOR);
            for (List<Point> polyline : polylines) {
                for (int i = 0; i < polyline.size() - 1; i++) {
                    Point p1 = polyline.get(i);
                    Point p2 = polyline.get(i + 1);
                    g2.drawLine(p1.x, p1.y, p2.x, p2.y);
                }
            }
            if (!workingPolyline.isEmpty()) {
                g2.setColor(WORKING_POLY_COLOR);
                for (int i = 0; i < workingPolyline.size() - 1; i++) {
                    Point p1 = workingPolyline.get(i);
                    Point p2 = workingPolyline.get(i + 1);
                    g2.drawLine(p1.x, p1.y, p2.x, p2.y);
                }
            }
        }

        if (drawTempLine) {
            g2.setColor(WORKING_LINE_COLOR);
            Point p = workingPolyline.get(workingPolyline.size() - 1);
            g2.drawLine(p.x, p.y, workingPoint.x, workingPoint.y);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        
        switch (evt.getButton()) {
            case MouseEvent.BUTTON1:
                switch (state) {
                    case INIT:
                        state = State.UNI;
                        addPoint(evt.getPoint());
                        drawPolys = true;
                        drawTempLine = false;
                        repaint();
                        n++;
                        break;
                    case UNI:
                        state = State.POLY;
                        addPoint(evt.getPoint());
                        drawPolys = true;
                        drawTempLine = false;
                        repaint();
                        n++;
                        break;
                    case POLY:
                        if (n < 255) {
                            state = State.POLY;
                            addPoint(evt.getPoint());
                            drawPolys = true;
                            drawTempLine = false;
                            repaint();
                            n++;
                        } else if (n == 255) {
                            //do nothing
                            n = n;
                        }
                        break;
                }
                break;
            case MouseEvent.BUTTON3:
                switch (state) {
                    case INIT://do nothing
                        n = 0;
                        drawTempLine = false;
                        drawPolys = false;
                        repaint();
                        break;
                    case UNI://do nothing
                        n = n;
                        drawTempLine = false;
                        drawPolys = false;
                        repaint();
                        break;
                    case POLY:
                        if (n > 2) {
                            state = State.POLY;
                            deleteLastPoint();
                            workingPoint = evt.getPoint();
                            drawTempLine = true;
                            drawPolys = true;
                            repaint();
                            n--;
                        } else if (n <= 2) {
                            state = State.UNI;
                            deleteLastPoint();
                            workingPoint = evt.getPoint();
                            drawTempLine = true;
                            drawPolys = true;
                            repaint();
                            n = 1;
                        }
                        break;
                }
                break;
        }
    }//GEN-LAST:event_formMouseClicked

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        switch (state) {
            case INIT://do nothing
                n = 0;
                drawTempLine = false;
                repaint();
                break;
            case UNI:
                n = n;
                state = State.UNI;
                workingPoint = evt.getPoint();
                drawTempLine = true;
                drawPolys = true;
                repaint();
                break;
            case POLY:
                n = n;
                state = State.POLY;
                workingPoint = evt.getPoint();
                drawTempLine = true;
                drawPolys = true;
                repaint();
                break;
        }
    }//GEN-LAST:event_formMouseMoved

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == 32) {
            switch (state) {
                case INIT://do nothing
                    n = 0;
                    drawTempLine = false;
                    repaint();
                    break;
                case UNI:
                    state = State.INIT;
                    savePolyline();
                    drawTempLine = false;
                    drawPolys = true;
                    repaint();
                    n = 0;
                    break;
                case POLY:
                    state = State.INIT;
                    savePolyline();
                    drawTempLine = false;
                    drawPolys = true;
                    repaint();
                    n = 0;
                    break;
            }
        }
    }//GEN-LAST:event_formKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
